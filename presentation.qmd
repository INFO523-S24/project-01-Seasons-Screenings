---
title: "Exploring Trends in Holiday Movies"
subtitle: "INFO 523 - Spring 2024 - Project 1"
author: "Surya Vardhan Dama<br>
        Rajitha Reddy Tiruthani<br>
        Melika Sharifi<br>
        Maksim Kulik<br>
        Toluwanimi Adegboyega Olorunnisola<br>
        Gowtham Gopalakrishnan"

title-slide-attributes:
  data-background-image: images/copy-space-popcorn-with-cinema-tickets.jpg
  data-background-size: stretch
  data-background-opacity: "0.7"
  data-slide-number: none
format:
  revealjs:
    theme:  ['data/customtheming.scss']
    transition: concave
    background-transition: fade
    scrollable: true
    logo: images/logo.jpeg

  
editor: visual
jupyter: python3
execute:
  echo: false
---

```{python}
#| label: load-packages
#| include: false

# Load packages here
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import missingno as msno

```

```{python}
#| label: setup
#| include: false
#| 
# Set up plot theme and figure resolution
sns.set_theme(style="whitegrid")
sns.set_context("notebook", font_scale=1.1)

import matplotlib.pyplot as plt
plt.rcParams['figure.dpi'] = 300
plt.rcParams['savefig.dpi'] = 300
plt.rcParams['figure.figsize'] = (6, 6 * 0.618)
```

```{python}
#| label: load-data
#| include: false
# Load data in Python
df = pd.read_csv('data/holiday_movies.csv')
new_genres = pd.read_csv('data/holiday_movie_genres.csv')
# display the first five rows of the dataset
df_earnings = pd.read_csv('data/holiday_movies_earnings.csv')

# earnings in million dollars
df_earnings['earnings'] = df_earnings['earnings'] // 1000000 
df_earnings.head()

```

## Introduction {style="font-size: 0.7em;"}

- Our Project explores a dataset covering holiday-themed films from 1929 to 2022, including details like movie titles, release years, runtime, genres, ratings, and holiday associations.
- The dataset includes crucial information such as movie titles, release years, runtime, genres, ratings, and indicators for major holidays like Christmas, Hanukkah, and Kwanzaa.
- Our analysis looked at how popular holiday movies have changed from the 1920s to the 2020s, showing how audience tastes and movie styles evolved.
- We also examined, which types of holiday movies tend to earn the most money, helping filmmakers and studios understand what audiences are willing to pay for.

# Question 1: {style="font-size: 0.7em;"}

## How have popular movies changed over the decades?

## Approach {style="font-size: 0.7em;"}

<br>
1.Quartile approach ensures representative observations by identifying popular films based on average ratings.<br><br>
2.To identify changes in the popularity of a genre, a multifaceted bar chart shows the genre distribution in the top quartiles across several decades.<br><br>
3.The scatter plot illustrates trends in preferred movie lengths and title lengths throughout time by correlating movie duration and average rating, color-coded by title length.<br><br>
4.Combining approaches reveals changes in industry trends and consumer tastes over decades in well-known Christmas films.

## Most popular genres in highest-rated holiday films {style="font-size: 0.65em;"}
::: panel-tabset
### Plot {style="font-size: 0.65em;"}
```{python}
# Drop rows where 'genres' is missing 
df_cleaned = df.dropna(subset=['genres']).copy()

# Impute missing values in 'runtime_minutes' with the median of the non-missing values
median_runtime = df_cleaned['runtime_minutes'].median()
df_cleaned.loc[:, 'runtime_minutes'] = df_cleaned['runtime_minutes'].fillna(median_runtime)

# Verify the imputation by checking if there are still missing values in 'runtime_minutes'
missing_after_imputation = df_cleaned.isnull().sum()
#print(f"Missing Value after modification : {missing_after_imputation}")

# Calculate the length of each movie title using .loc to safely modify the DataFrame
df_cleaned.loc[:, 'title_length'] = df_cleaned['original_title'].apply(len)

# Determine the rating quartile for each movie
df_cleaned.loc[:, 'rating_quartile'] = pd.qcut(df_cleaned['average_rating'], 4, labels=False)

# Count the number of genres per movie, handling NaN if present
df_cleaned.loc[:, 'genre_count'] = df_cleaned['genres'].apply(lambda x: len(x.split(',')) if pd.notnull(x) else 0)

# Filter to include only movies in the 3rd and 4th rating quartiles and use .copy() for top_movies
top_movies = df_cleaned[df_cleaned['rating_quartile'] >= 2].copy()

# Organize the data by decades using .loc to avoid SettingWithCopyWarning
top_movies.loc[:, 'decade'] = (top_movies['year'] // 10) * 10

#Merge the new genre dataset with the  existing cleaned DataFrame
merged_df = pd.merge(top_movies, new_genres, on = 'tconst', how = 'left')

# display the first five rows of top_movies
#top_movies.head()

# Count the frequency of each genre within the 3rd and 4th rating quartiles
genre_counts = merged_df['genres_y'].value_counts()
plt.figure(figsize=(12, 8))
sns.barplot(x = genre_counts.values, y = genre_counts.index, hue = genre_counts.index, palette = 'viridis', legend = False)
plt.xlabel('Number of Movies')
plt.ylabel('Genre')
plt.title('Most Common Genres Among Top-Rated Holiday Movies')
plt.show()
```

### Insights

- From the genre distribution bar plot, we can observe that Comedy and Drama are the most common genres among top-rated holiday movies. 
- This predominance might suggest that audiences tend to prefer lighter and more emotionally resonant stories during holiday seasons, which aligns with the festive and familial spirit of such times. 
- Family and Romance genres follow, which further emphasizes the desire for movies that bring people together, reflecting typical holiday themes centered around love, family, and togetherness.
:::
## The distribution of movie runtimes across different rating quartiles {style="font-size: 0.65em;"}
::: panel-tabset
### Plot {style="font-size: 0.65em;"}
```{python}
# Create a boxplot to visualize the distribution of movie runtimes across different rating quartiles
# 'x' specifies the categorical variable 'rating_quartile' for the x-axis
# 'y' specifies the numerical variable 'runtime_minutes' for the y-axis
plt.figure(figsize=(12, 8))
sns.boxplot(x = "rating_quartile", y = "runtime_minutes", data = top_movies)
plt.xlabel("Rating Quartile")
plt.ylabel("Runtime(min)")
plt.title("Rating Quartile vs Runtime in Movies")
plt.show()
```

### Insights
- The plot showcasing the relationship between movie runtime and rating quartile indicates that there isn’t a strong preference for movie length within the top rating quartiles. 
- While there is a concentration of movies with runtimes around 100 minutes (typical for standard feature films), the presence of highly-rated movies with longer runtimes suggests that a film’s duration is less significant to its reception compared to other factors such as story, acting, and direction. 
- However, the spread of runtimes in the 3rd quartile is narrower than in the 4th, hinting that exceptionally well-received movies might have a tighter consistency in their duration.
:::
## The relationship between the length of movie titles and their average ratings {style="font-size: 0.65em;"}
::: panel-tabset
### Plot {style="font-size: 0.65em;"}
```{python}
# Create a line plot to visualize the relationship between the length of movie titles and their average ratings
# 'x' specifies the numerical variable 'title_length' for the x-axis
# 'y' specifies the numerical variable 'average_rating' for the y-axis
plt.figure(figsize=(12, 8))
sns.lineplot(x = "title_length", y = "average_rating", data = top_movies, color = "purple", errorbar = None)
x_intervals = np.arange(0, max(top_movies['title_length']) + 10, 10)
plt.xticks(x_intervals)
plt.xlabel("Title Length")
plt.ylabel("Average Rating")
plt.title("Title Length vs Average Rating in Movies")
plt.show()
```

### Insights
- The line plot correlating title length with average rating shows a more erratic relationship. 
- While no clear trend is discernible, there appears to be a slight tendency for movies with shorter titles to have higher ratings, although there are exceptions at various points. 
- This might imply that conciseness in a title could be associated with a film’s memorability or marketing effectiveness, but the numerous outliers make it difficult to draw a definitive conclusion.
:::
# Question 2:  {style="font-size: 0.7em;"}

## What kind of holiday movies earn the most money?

## Approach {style="font-size: 0.7em;"}

<br>
1. We investigated correlations between movie features and earnings, and by utilizing IMDb's API to supplement dataset with box office information.<br><br>
2. which Populated a new "earnings" column using IMDb's API and unique movie identifiers (tconst), enabling analysis without exposing API key or executing real-time calls.<br><br>
3. Generate earnings data once and update a copy of the dataset in the /data folder to avoid repeated API calls and ensure efficiency.<br><br>
4. Ensure data security by not exposing the API key and minimize processing time by pre-fetching earnings data.

## Year-earnings relationship 1940-2020 {style="font-size: 0.7em;"}
::: panel-tabset
### Plot {style="font-size: 0.7em;"}

```{python}
data_copy = df_earnings.copy()
averages = data_copy.groupby('year')['earnings'].mean()

scatter = sns.scatterplot(data=averages.to_frame(), x = "year", y = "earnings")
labels = scatter.set(xlabel = "Year", ylabel = "Earnings (in mln USD)", title = "Year-earnings relationship")
plt.show()
```

### Insights
- By observing, in the plot pre-1980 movies exhibit a higher frequency of outliers.
- These outliers represent films with either exceptionally high earnings or minimal returns. 
:::
## Relation between the average rating and its earnings {style="font-size: 0.7em;"}
::: panel-tabset
### Plot {style="font-size: 0.7em;"}
```{python}
data_copy = df_earnings.copy()
averages = data_copy.groupby('average_rating')['earnings'].mean()

scatter = sns.scatterplot(data=averages.to_frame(),x = "average_rating", y = "earnings")
labels = scatter.set(xlabel ="Rating", ylabel = "Earnings (in mln USD)", title = "Rating-earnings relationship")
plt.show()
```

### Insights
- As we may intuitively expect from the above plot, there indeed seems to be a correlation between 
  the average rating of a movie and its earnings. 
- The more people like the movie, the more tickets it sells.
:::
## Average Earnings by Movie Genre {style="font-size: 0.7em;"}
::: panel-tabset
### Plot {style="font-size: 0.7em;"}
```{python}
# Merge the genre data with the earnings data on the common key (assuming it's 'tconst' here)
merged_data = pd.merge(new_genres, df_earnings, on='tconst', how='inner')

# Split the genres into lists if they're combined in a single string, assuming they're separated by commas
merged_data['genres_list'] = merged_data['genres_y'].str.split(',')

# Explode the DataFrame so each genre gets its own row
merged_data_exploded = merged_data.explode('genres_list')

# Calculate the average earnings for each genre
average_earnings_by_genre = merged_data_exploded.groupby('genres_list')['earnings'].mean().reset_index()

# Create a bar plot to show average earnings by genre
plt.figure(figsize=(12, 8))
sns.barplot(x='earnings', y='genres_list', data=average_earnings_by_genre.sort_values('earnings', ascending=False))
plt.xlabel('Average Earnings (in million USD)')
plt.ylabel('Genre')
plt.title('Average Earnings by Movie Genre')
plt.xticks(rotation=45)
plt.show()
```

### Insights
- The chart displays a range of genres from “Reality-TV” at the top, suggesting the highest average 
  earnings, to “Thriller” at the bottom, indicating the lowest earnings within this visual.
:::
## Average Earnings by Holiday Type {style="font-size: 0.7em;"}
::: panel-tabset
### Plot {style="font-size: 0.7em;"}
```{python}
# Initialize an empty list to store average earnings by holiday type
holiday_earnings_list = []

# Calculate the average earnings for each holiday type
for holiday in ['christmas', 'hanukkah', 'kwanzaa', 'holiday']:
    # Filter the DataFrame to include only movies associated with the holiday
    holiday_df = merged_data[merged_data[holiday] == True]
    # Calculate the mean earnings for the holiday
    average_earnings = holiday_df['earnings'].mean()
    # Create a dictionary of the results and append to the list
    holiday_earnings_list.append({'Holiday Type': holiday, 'Average Earnings': average_earnings})

# Convert the list of dictionaries to a DataFrame
holiday_earnings = pd.DataFrame(holiday_earnings_list)

# Convert the 'Average Earnings' to millions USD for better readability
#holiday_earnings['Average Earnings (in million USD)'] = holiday_earnings['Average Earnings'] / 1000000

# Create a bar plot to show average earnings by holiday type
plt.figure(figsize=(12, 8))
sns.barplot(x = 'Average Earnings', y = 'Holiday Type', data = holiday_earnings)
plt.xlabel('Average Earnings (in million USD)')
plt.ylabel('Holiday Type')
plt.title('Average Earnings by Holiday Type')
plt.show()
```

### Insights
- The bar chart illustrates that hanukkah-themed movies are the highest earners, followed by films  about christmas in general. 
- Movies about Holiday and Kwanzaa have notably lower average earnings, suggesting that hanukkah 
  films are the most commercially successful within holiday genres.
:::
## Conclusion
As holiday film trends changed, comedy and drama took center stage. The duration of the film did not greatly affect the ratings.

The highest-grossing movies are those with Hanukkah themes, followed by traditional Christmas blockbusters. Films with a Kwanzaa or holiday theme made less money. Particular seasonal themes seem to be the most profitable, particularly Hanukkah and Christmas.

## References
\[1\] Title: Holiday Movies, Source: tidytuesday, Link: <https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-12-12/readme.md>

\[2\] Quarto, For documentation and presentation - [Quarto](https://quarto.org/docs/reference/formats/html.html)

\[3\] Our Presentation Background Image - Link: <https://www.freepik.com/free-photo/takeaway-drinking-glass-with-straw-3d-glasses-cinema-tickets-popcorn-box-against-white-backdrop_4822391.htm>

\[4\] Our thank you Image - <https://boslean.weebly.com/blog/powerpoint-transparent-png-thank-you-gif>

## 
![](images/thank-you-547794.gif){fig-align="center"}
